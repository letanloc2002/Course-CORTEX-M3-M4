/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
void task1_handler(void);
void task2_handler(void);
void task3_handler(void);
void task4_handler(void);
void init_systick_timer(uint32_t tick_hz);

/* some stack memory  calculations*/
#define SIZE_TASK_STACK			1024U
#define SIZE_SCHED_STACK			1024U

#define SRAM_START				0x20000000U
#define SIZE_SRAM				((128)*(1024))
#define SRAM_END				((SRAM_START)+(SIZE_SRAM))

#define T1_STACK_START			SRAM_END
#define T2_STACK_START			((SRAM_END) - (1*SIZE_TASK_STACK))
#define T3_STACK_START			((SRAM_END) - (2*SIZE_TASK_STACK))
#define T4_STACK_START			((SRAM_END) - (3*SIZE_TASK_STACK))
#define SCHED_STACK_START		((SRAM_END) - (4*SIZE_TASK_STACK))

#define  TICK_HZ 				1000U

#define HSI_CLOCK 				16000000U
#define SYSTICK_TIM_CLK 		(HSI_CLOCK)
int main(void)
{
    /* Loop forever */
	init_systick_timer(TICK_HZ);
	for(;;);
}

void task1_handler(void)
{
	while (1)
	{
		printf("Task 1\n");

	}
}
void task2_handler(void)
{
	while (1)
	{
		printf("Task 2\n");

	}
}
void task3_handler(void)
{
	while (1)
	{
		printf("Task 3\n");

	}
}
void task4_handler(void)
{
	while (1)
	{
		printf("Task 4\n");

	}
}
void init_systick_timer(uint32_t tick_hz)
{
	uint32_t *pSRVR = (uint32_t*) 0xE000E014;
	uint32_t *pSCVR = (uint32_t*) 0xE000E010;
	//1 pusle for reload value so should -1
	uint32_t count_value = SYSTICK_TIM_CLK/tick_hz - 1;
	//clear the value of SVR;
	*pSRVR &= ~(0x00FFFFFF);
	//load the value  in to SVR
	*pSRVR |= count_value;

	*pSCVR |= (1<<1);//Enables SysTick exception repuest;
	*pSCVR |= (1<<2);//Indicates the clock source, processor clock source

	//enable the systick
	*pSCVR |= (1<<0);//enable the counter

}

void SysTick_Handler(void)
{

}
